reflection prompt:
What happens when you initialize a repository? Why do you need to do it?
reflection response:
turns a directory into a git repository
adds .git hidden folder
command(s):
ls -a
git init
git status

reflection prompt:
How is the staging area different from the working directory and the repository? 
What value do you think it offers?
reflection response:
working directory contains all files, repository tracks history of files, while
staging groups files into logical packages of commit.
enables flexibility in creating commits, don't have to include all files.
command(s):
git reset fileName (removes file from stage, still in working directory though)

reflection prompt:
How can you use the staging area to make sure you have one commit per logical change?
reflection response:
If multiple files changed, can be grouped in stage to be committed as a set.
Can commit single files at a time.
command(s):
git add fileName (adds file to stage)
git commit (commits all changes in stage to repo)
git commit -m "commit message" (inline commit message)
git diff (no argumenst, compares working directory with staging area)
git diff --staged (compares stage with repo)

reflection prompt:
What are some situations when branches would be helpful in keeping your history organized?
How would branches help?
reflection response:
Creating experimental new features, experimental versions, while preserving main version
functionality.
Can branch off, experiment, and merge later if the experiment turns out well.
Able to use human-readable labels too.
Can have multiple people working on multiple features to merge later.
command(s):
git branch (lists branches in commit history)
git branch newBranchName (creates new branch)

reflection prompt:
How do the diagrams help you visualize the branch structures?
reflection response:
see non-linear positions of commits and branches relative to each other
can trace reachability and find unreachable commits.
command(s):
git checkout -b newBranchName (creates a new branch off of current head)
git log --graph --oneline branch1 branch2 (lists relative commit positions between branches)
